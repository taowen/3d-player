---
alwaysApply: true
---

# 3D Player

## 调研非常重要

在开始改代码之前必须调研清楚

1. 主要是依赖 ffmpeg。可以使用 deepwiki 查不熟悉的接口。
2. 先调研清楚当前任务的外部依赖，以及所有涉及的上下游文件
3. 确认测试存在和测试逻辑的合理性
4. 写实现
5. 让测试通过
6. 把代码的改动同步到 README.md 方便新人快速上手

## 文件结构
```
src/
├── mkv_stream_reader.h       # MKV流读取器头文件
├── mkv_stream_reader.cpp     # MKV流读取器实现
├── hw_video_decoder.h        # DirectX 11硬件视频解码器头文件
├── hw_video_decoder.cpp      # DirectX 11硬件视频解码器实现
├── rgb_video_decoder.h       # RGB视频解码器头文件
└── rgb_video_decoder.cpp     # RGB视频解码器实现
tests/
├── test_mkv_stream_reader.cpp # MKV流读取器测试
├── test_hw_video_decoder.cpp  # 硬件视频解码器测试
└── test_rgb_video_decoder.cpp # RGB视频解码器测试
test_data/
└── sample_hw.mkv             # 测试文件
build.ps1                     # PowerShell构建脚本
```

## ⚠️ 重要说明

**本软件严格要求硬件解码，绝不允许软件解码回退！**

- 所有视频解码必须使用 DirectX 11 硬件加速
- 如果系统不支持硬件解码，程序将直接失败而不是降级到软件解码
- 这确保了一致的高性能 GPU 加速体验

## 核心组件

### MKVStreamReader
MKV文件流读取器，提供 Pull-style 接口，支持视频和音频流的解析和包读取。详细接口请参考 `src/mkv_stream_reader.h`。

### HwVideoDecoder  
DirectX 11 硬件视频解码器，使用 FFmpeg AVBufferPool 进行内存管理。详细接口请参考 `src/hw_video_decoder.h`。

**关键特性：**
- 自动检测和选择 D3D11VA 硬件解码器
- 智能的像素格式协商（首选 D3D11，支持多种硬件格式）
- **⚠️ 严格硬件解码要求**：无硬件格式时直接失败，绝不允许软件解码
- 完整的硬件设备上下文管理

**测试验证：**
- ✅ 成功找到并初始化 D3D11VA 硬件解码器
- ✅ 正确创建 D3D11 设备上下文
- ✅ 像素格式协商正常工作
- ✅ 强制硬件解码，无软件回退机制

### RgbVideoDecoder
RGB 视频解码器，基于 HwVideoDecoder 并提供 RGB 转换功能。内部构造 HwVideoDecoder，使用 VideoProcessorBlt 将 YUV 格式转换为 RGB D3D11 纹理。详细接口请参考 `src/rgb_video_decoder.h`。

## 硬件解码特性

### DirectX 11 硬件加速
- **⚠️ 强制硬件解码**：本软件严格要求硬件解码，绝不允许软件解码回退
- **支持编解码器**：H.264 (h264_d3d11va)、HEVC (hevc_d3d11va)、AV1 (av1_d3d11va)
- **输出格式**：仅支持硬件像素格式（AV_PIX_FMT_D3D11、AV_PIX_FMT_D3D11VA_VLD、AV_PIX_FMT_CUDA、AV_PIX_FMT_VULKAN）
- **RGB 转换**：使用 VideoProcessorBlt 将 YUV 转换为 RGB D3D11 纹理
- **格式协商**：自动选择最佳的硬件像素格式，无硬件格式时直接失败

### FFmpeg AVBufferPool 缓冲管理
- **自动内存管理**：使用 FFmpeg 内置的 AVBufferPool 系统
- **线程安全**：内置原子操作，支持多线程环境
- **高效重用**：自动回收和重用缓冲区，减少GPU内存分配开销
- **动态调整**：根据解码器需求自动分配适量的参考帧缓冲区

## 构建测试

我们使用 git bash 的 terminal，要注意 powershell 脚本的执行方式

### Git Bash 环境
```bash
powershell -ExecutionPolicy Bypass -File ./build.ps1 test  # 构建并运行测试
```

- **测试运行目录**：测试程序在项目根目录 (`3d-player/`) 运行
- **文件路径**：测试中所有相对路径都是相对于项目根目录的
- **测试文件**：`test_data/sample_hw.mkv` 从项目根目录访问

⚠️ **重要：Git Bash 路径问题**
- Git Bash 使用 Linux 风格路径分隔符 `/`，不认识 Windows 的 `\`
- 避免路径解析错误：`C:\path\to\file` vs `C:/path/to/file`

## 内存管理说明

### FFmpeg 内存管理模式
根据 FFmpeg 官方文档，`avcodec_receive_frame()` 的内存管理遵循以下规则：

1. **调用者责任**：`avcodec_receive_frame()` 返回的 AVFrame 由调用者负责释放
2. **所有权转移**：函数成功时，AVFrame 的所有权转移给调用者
3. **引用计数**：FFmpeg 使用 AVBuffer API 进行引用计数，自动管理底层缓冲区

### 当前实现的内存管理
- `HwVideoDecoder::readNextFrame()` 调用 `av_frame_alloc()` 分配 AVFrame
- `avcodec_receive_frame()` 填充解码数据并转移所有权
- 调用者必须在使用完毕后调用 `av_frame_free(&frame.frame)` 释放内存
- FFmpeg 的 AVBufferPool 自动管理 D3D11 纹理缓冲区的重用和回收

---

## 🔧 维护指南

**⚠️ 重要：每次修改代码后都要更新 README.md**

### 需要更新的内容：
1. **文件结构** - 添加/删除文件时更新
2. **核心API** - 修改公共接口时更新
3. **构建测试** - 改变构建方式时更新

### 不能更新的内容

不要更新"维护指南"这个章节

### 更新原则：
- 保持简洁，只记录与快速上手改代码相关的必要核心信息
- 及时更新 README.md，避免文档过时

---

## 📋 更新记录

### 2024-07-12: 硬件解码器强制模式
- **问题**：测试文件格式导致硬件解码测试失败，需要强制硬件解码
- **解决方案**：
  - 修正硬件解码器的像素格式检查逻辑
  - 实现智能的格式协商机制，仅接受硬件格式
  - **删除软件解码回退机制**：严格要求硬件解码
  - 添加硬件解码器初始化验证测试
- **结果**：硬件解码器严格模式正常工作，确认强制 D3D11VA 硬件解码功能