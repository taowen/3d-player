---
alwaysApply: true
---

# 3D Player

## 文件结构
```
src/
├── mkv_stream_reader.h       # MKV流读取器头文件
├── mkv_stream_reader.cpp     # MKV流读取器实现
├── hw_video_decoder.h        # 硬件视频解码器头文件
└── hw_video_decoder.cpp      # 硬件视频解码器实现
tests/
├── test_mkv_stream_reader.cpp # MKV流读取器测试
└── test_hw_video_decoder.cpp  # 硬件视频解码器测试
test_data/
└── sample_hw.mkv             # 测试文件
build.ps1                     # PowerShell构建脚本
```

## 核心API

### MKVStreamReader
```cpp
class MKVStreamReader {
public:
    bool open(const std::string& filepath);
    StreamInfo getStreamInfo() const;
    bool readNextPacket(AVPacket* packet);
    bool isVideoPacket(const AVPacket* packet) const;
    bool isAudioPacket(const AVPacket* packet) const;
    bool isOpen() const;
    bool isEOF() const;
    AVCodecParameters* getVideoCodecParameters() const;
    AVCodecParameters* getAudioCodecParameters() const;
    void close();
};
```

### HwVideoDecoder
```cpp
class HwVideoDecoder {
public:
    struct DecodedFrame {
        AVFrame* frame;
        bool is_valid;
    };
    
    bool open(const std::string& filepath);
    bool readNextFrame(DecodedFrame& frame);
    bool isOpen() const;
    bool isEOF() const;
    void close();
    
    MKVStreamReader* getStreamReader() const;
};
```

## 构建测试

我们使用 git bash 的 terminal，要注意 powershell 脚本的执行方式

### Git Bash 环境
```bash
powershell -ExecutionPolicy Bypass -File ./build.ps1 test  # 构建并运行测试
```

## 使用示例

### MKVStreamReader 使用
```cpp
MKVStreamReader reader;
if (reader.open("video.mkv")) {
    AVPacket* packet = av_packet_alloc();
    while (reader.readNextPacket(packet)) {
        if (reader.isVideoPacket(packet)) {
            // 处理视频包
        } else if (reader.isAudioPacket(packet)) {
            // 处理音频包
        }
        av_packet_unref(packet);
    }
    av_packet_free(&packet);
    reader.close();
}
```

### HwVideoDecoder 使用
```cpp
HwVideoDecoder decoder;
if (decoder.open("video.mkv")) {
    HwVideoDecoder::DecodedFrame frame;
    while (decoder.readNextFrame(frame)) {
        if (frame.is_valid) {
            // 处理解码后的帧
        }
    }
    decoder.close();
}
```

---

## 🔧 维护指南

**⚠️ 重要：每次修改代码后都要更新 README.md**

### 需要更新的内容：
1. **文件结构** - 添加/删除文件时更新
2. **核心API** - 修改公共接口时更新
3. **构建测试** - 改变构建方式时更新

### 不能更新的内容

不要更新“维护指南”这个章节

### 更新原则：
- 保持简洁，只记录与快速上手改代码相关的必要核心信息
- 及时更新 README.md，避免文档过时
