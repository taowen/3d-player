---
alwaysApply: true
---

# 3D Player

## 文件结构
```
src/
├── mkv_stream_reader.h       # MKV流读取器头文件
├── mkv_stream_reader.cpp     # MKV流读取器实现
├── hw_video_decoder.h        # DirectX 11硬件视频解码器头文件
└── hw_video_decoder.cpp      # DirectX 11硬件视频解码器实现
tests/
├── test_mkv_stream_reader.cpp # MKV流读取器测试
└── test_hw_video_decoder.cpp  # 硬件视频解码器测试
test_data/
└── sample_hw.mkv             # 测试文件
build.ps1                     # PowerShell构建脚本
```

## 核心组件

### MKVStreamReader
MKV文件流读取器，提供 Pull-style 接口，支持视频和音频流的解析和包读取。详细接口请参考 `src/mkv_stream_reader.h`。

### HwVideoDecoder  
DirectX 11 硬件视频解码器，使用 FFmpeg AVBufferPool 进行内存管理。详细接口请参考 `src/hw_video_decoder.h`。

## 硬件解码特性

### DirectX 11 硬件加速
- **必须使用硬件解码**：无软件解码回退，确保GPU加速
- **支持编解码器**：H.264 (h264_d3d11va)、HEVC (hevc_d3d11va)、AV1 (av1_d3d11va)
- **输出格式**：AV_PIX_FMT_D3D11 (DirectX 11纹理)

### FFmpeg AVBufferPool 缓冲管理
- **自动内存管理**：使用 FFmpeg 内置的 AVBufferPool 系统
- **线程安全**：内置原子操作，支持多线程环境
- **高效重用**：自动回收和重用缓冲区，减少GPU内存分配开销
- **动态调整**：根据解码器需求自动分配适量的参考帧缓冲区

## 构建测试

我们使用 git bash 的 terminal，要注意 powershell 脚本的执行方式

### Git Bash 环境
```bash
powershell -ExecutionPolicy Bypass -File ./build.ps1 test  # 构建并运行测试
```

## 内存管理说明

### FFmpeg 内存管理模式
根据 FFmpeg 官方文档，`avcodec_receive_frame()` 的内存管理遵循以下规则：

1. **调用者责任**：`avcodec_receive_frame()` 返回的 AVFrame 由调用者负责释放
2. **所有权转移**：函数成功时，AVFrame 的所有权转移给调用者
3. **引用计数**：FFmpeg 使用 AVBuffer API 进行引用计数，自动管理底层缓冲区

### 当前实现的内存管理
- `HwVideoDecoder::readNextFrame()` 调用 `av_frame_alloc()` 分配 AVFrame
- `avcodec_receive_frame()` 填充解码数据并转移所有权
- 调用者必须在使用完毕后调用 `av_frame_free(&frame.frame)` 释放内存
- FFmpeg 的 AVBufferPool 自动管理 D3D11 纹理缓冲区的重用和回收

---

## 🔧 维护指南

**⚠️ 重要：每次修改代码后都要更新 README.md**

### 需要更新的内容：
1. **文件结构** - 添加/删除文件时更新
2. **核心API** - 修改公共接口时更新
3. **构建测试** - 改变构建方式时更新

### 不能更新的内容

不要更新"维护指南"这个章节

### 更新原则：
- 保持简洁，只记录与快速上手改代码相关的必要核心信息
- 及时更新 README.md，避免文档过时