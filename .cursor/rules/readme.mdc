---
alwaysApply: true
---

# 3D Player

## 开发流程

遵循测试驱动、小步迭代的原则

### 1. 调研阶段
- 主要是依赖 ffmpeg。可以使用 deepwiki 查不熟悉的接口
- 先调研清楚当前任务的外部依赖，以及所有涉及的上下游文件
- 确认测试存在和测试逻辑的合理性

### 2. 接口设计阶段
- **从最简单的公开接口开始设计**，不要上来就把所有可能的功能都加上
- **不要上来就定义 private method**，实现时再按需添加
- 专注于核心功能，避免过度设计
- 通过多轮简化，去掉所有不必要的复杂性

### 3. 测试驱动开发
- 先写测试，明确期望的行为
- 写最小化的实现让测试通过
- 逐步增加功能，每次只添加一个小功能
- 保持测试始终通过

### 4. 小步迭代原则
- 每次只做一件事，做完一件事再做下一件事
- 不要在一件事还没有做完之前就开始添加性能监控等次要的新功能
- 及时把代码的改动同步到 README.md 方便新人快速上手

### 5. 代码简化原则
- 如果一个功能或接口被质疑是否需要，优先选择删除
- 保持接口最小化，专注于核心功能
- 避免添加"可能有用"的功能，只添加"确实需要"的功能

## 文件结构
```
src/
├── mkv_stream_reader.h       # MKV流读取器头文件
├── mkv_stream_reader.cpp     # MKV流读取器实现
├── hw_video_decoder.h        # DirectX 11硬件视频解码器头文件
├── hw_video_decoder.cpp      # DirectX 11硬件视频解码器实现
├── rgb_video_decoder.h       # RGB视频解码器头文件
├── rgb_video_decoder.cpp     # RGB视频解码器实现
├── video_player.h            # 视频播放器头文件
└── video_player.cpp          # 视频播放器实现
tests/
├── test_mkv_stream_reader.cpp # MKV流读取器测试
├── test_hw_video_decoder.cpp  # 硬件视频解码器测试
├── test_rgb_video_decoder.cpp # RGB视频解码器测试
└── test_video_player.cpp     # 视频播放器测试
test_data/
└── sample_hw.mkv             # 测试文件 - H.264编码，1280x720@30fps，支持硬件解码
build.ps1                     # PowerShell构建脚本
```

## 核心组件

### MKVStreamReader
MKV文件流读取器，提供 Pull-style 接口，支持视频和音频流的解析和包读取。详细接口请参考 `src/mkv_stream_reader.h`。

### HwVideoDecoder  
DirectX 11 硬件视频解码器，使用 FFmpeg AVBufferPool 进行内存管理。详细接口请参考 `src/hw_video_decoder.h`。

### RgbVideoDecoder
RGB 视频解码器，基于 HwVideoDecoder 并提供 RGB 转换功能。内部构造 HwVideoDecoder，使用 VideoProcessorBlt 将 YUV 格式转换为 RGB D3D11 纹理。详细接口请参考 `src/rgb_video_decoder.h`。

### VideoPlayer
视频播放器，支持时间驱动的播放控制和预解码缓冲。基于 RgbVideoDecoder 提供 RGB 纹理输出，支持 onTimer 接口进行时间驱动的帧切换。详细接口请参考 `src/video_player.h`。

## 核心决策

### DirectX 11 硬件加速
- **⚠️ 强制硬件解码**：本软件严格要求硬件解码，绝不允许软件解码回退
- **支持编解码器**：H.264 (h264_d3d11va)、HEVC (hevc_d3d11va)、AV1 (av1_d3d11va)
- **输出格式**：仅支持硬件像素格式（AV_PIX_FMT_D3D11、AV_PIX_FMT_D3D11VA_VLD、AV_PIX_FMT_CUDA、AV_PIX_FMT_VULKAN）
- **RGB 转换**：使用 VideoProcessorBlt 将 YUV 转换为 RGB D3D11 纹理
- **格式协商**：自动选择最佳的硬件像素格式，无硬件格式时直接失败

### FFmpeg AVBufferPool 缓冲管理
- **自动内存管理**：使用 FFmpeg 内置的 AVBufferPool 系统
- **线程安全**：内置原子操作，支持多线程环境
- **高效重用**：自动回收和重用缓冲区，减少GPU内存分配开销
- **动态调整**：根据解码器需求自动分配适量的参考帧缓冲区

## 构建测试

我们使用 git bash 的 terminal，要注意 powershell 脚本的执行方式

### Git Bash 环境
```bash
powershell -ExecutionPolicy Bypass -File ./build.ps1 test  # 构建并运行测试
```

- **测试运行目录**：测试程序在项目根目录 (`3d-player/`) 运行
- **文件路径**：测试中所有相对路径都是相对于项目根目录的
- **测试文件**：`test_data/sample_hw.mkv` 从项目根目录访问

⚠️ **重要：Git Bash 路径问题**
- Git Bash 使用 Linux 风格路径分隔符 `/`，不认识 Windows 的 `\`
- 避免路径解析错误：`C:\path\to\file` vs `C:/path/to/file`

---

## 🔧 维护指南

**⚠️ 重要：每次修改代码后都要更新 README.md**

### 需要更新的内容：
1. **文件结构** - 添加/删除文件时更新
2. **核心API** - 修改公共接口时更新
3. **构建测试** - 改变构建方式时更新

### 不能更新的内容

不要更新"维护指南"这个章节，保持这个章节是文档最后一个部分。
不能新增新的大章节。

### 更新原则：
- **非必要不更新**：只有当修改影响到新人快速上手时才更新文档
- 保持简洁，只记录与快速上手改代码相关的必要核心信息
- 避免添加实现细节、性能优化描述等非关键信息
- 及时更新 README.md，避免文档过时